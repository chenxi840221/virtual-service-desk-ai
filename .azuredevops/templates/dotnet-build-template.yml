# .NET Build Template for DXC Virtual Service Desk AI

parameters:
- name: buildConfiguration
  type: string
  default: 'Release'
- name: dotNetVersion
  type: string
  default: '8.0.x'
- name: runTests
  type: boolean
  default: true
- name: publishArtifacts
  type: boolean
  default: true

steps:
- task: UseDotNet@2
  displayName: 'Use .NET ${{ parameters.dotNetVersion }}'
  inputs:
    packageType: 'sdk'
    version: '${{ parameters.dotNetVersion }}'
    includePreviewVersions: false

- task: DotNetCoreCLI@2
  displayName: 'Restore NuGet Packages'
  inputs:
    command: 'restore'
    projects: 'src/**/*.csproj'
    feedsToUse: 'select'
    verbosityRestore: 'minimal'

- task: DotNetCoreCLI@2
  displayName: 'Build Solution'
  inputs:
    command: 'build'
    projects: 'VirtualServiceDesk.sln'
    arguments: '--configuration ${{ parameters.buildConfiguration }} --no-restore'

- ${{ if eq(parameters.runTests, true) }}:
  - task: DotNetCoreCLI@2
    displayName: 'Run Unit Tests'
    inputs:
      command: 'test'
      projects: 'src/**/*Tests.csproj'
      arguments: '--configuration ${{ parameters.buildConfiguration }} --no-build --collect:"XPlat Code Coverage" --logger trx --results-directory $(Agent.TempDirectory)'
      publishTestResults: true

  - task: PublishCodeCoverageResults@1
    displayName: 'Publish Code Coverage'
    condition: succeededOrFailed()
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
      failIfCoverageEmpty: false

- task: DotNetCoreCLI@2
  displayName: 'Publish API'
  inputs:
    command: 'publish'
    projects: 'src/DXC.ServiceDesk.API/DXC.ServiceDesk.API.csproj'
    arguments: '--configuration ${{ parameters.buildConfiguration }} --output $(Build.ArtifactStagingDirectory)/api --no-build'
    publishWebProjects: false
    zipAfterPublish: true

- task: DotNetCoreCLI@2
  displayName: 'Publish UI'
  inputs:
    command: 'publish'
    projects: 'src/DXC.ServiceDesk.UI/DXC.ServiceDesk.UI.csproj'
    arguments: '--configuration ${{ parameters.buildConfiguration }} --output $(Build.ArtifactStagingDirectory)/ui --no-build'
    publishWebProjects: false
    zipAfterPublish: true

- ${{ if eq(parameters.publishArtifacts, true) }}:
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Build Artifacts'
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: 'drop'
      publishLocation: 'Container'

- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  condition: succeededOrFailed()
  inputs:
    testResultsFormat: 'VSTest'
    testResultsFiles: '**/*.trx'
    searchFolder: '$(Agent.TempDirectory)'
    mergeTestResults: true
    failTaskOnFailedTests: true

# Security scanning with SARIF results
- task: DotNetCoreCLI@2
  displayName: 'Security Analysis'
  inputs:
    command: 'custom'
    custom: 'list'
    arguments: 'package --vulnerable --include-transitive --format json --output-file $(Build.ArtifactStagingDirectory)/vulnerability-report.json'
  continueOnError: true

- task: PublishBuildArtifacts@1
  displayName: 'Publish Security Report'
  condition: always()
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)/vulnerability-report.json'
    artifactName: 'security-reports'